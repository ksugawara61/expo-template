/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List items
         * @description Get a list of items (articles) in descending order of creation date
         */
        get: operations["listItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get item
         * @description Get a specific item by ID
         */
        get: operations["getItem"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Item: {
            /**
             * @description Unique item ID
             * @example c686397e4a0f4f11683d
             */
            id: string;
            /**
             * @description Item title
             * @example Example title
             */
            title: string;
            /**
             * @description Item content in Markdown format
             * @example # Example
             */
            body: string;
            /**
             * @description Item content in HTML format
             * @example <h1>Example</h1>
             */
            rendered_body: string;
            /**
             * @description Item URL
             * @example https://qiita.com/Qiita/items/c686397e4a0f4f11683d
             */
            url: string;
            /**
             * @description Whether the item is private (limited sharing)
             * @example false
             */
            private: boolean;
            /**
             * @description Whether the item is in co-editing mode (Qiita Team only)
             * @example false
             */
            coediting: boolean;
            /**
             * @description Whether slide mode is enabled
             * @example false
             */
            slide: boolean;
            /** @description List of tags attached to the item */
            tags: components["schemas"]["Tag"][];
            user: components["schemas"]["User"];
            group: components["schemas"]["Group"];
            team_membership: components["schemas"]["TeamMembership"];
            /**
             * @description Organization URL name
             * @example qiita-inc
             */
            organization_url_name: string | null;
            /**
             * Format: date-time
             * @description Creation date and time
             * @example 2000-01-01T00:00:00+00:00
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update date and time
             * @example 2000-01-01T00:00:00+00:00
             */
            updated_at: string;
            /**
             * @description Number of comments on this item
             * @example 100
             */
            comments_count: number;
            /**
             * @description Number of likes on this item (Qiita only)
             * @example 100
             */
            likes_count: number;
            /**
             * @description Number of emoji reactions on this item (Qiita Team only)
             * @example 100
             */
            reactions_count: number;
            /**
             * @description Number of stocks for this item
             * @example 100
             */
            stocks_count: number;
            /**
             * @description Number of page views
             * @example 100
             */
            page_views_count: number | null;
        };
        CreateItemRequest: {
            /**
             * @description Item title
             * @example Example title
             */
            title: string;
            /**
             * @description Item content in Markdown format
             * @example # Example
             */
            body: string;
            /** @description List of tags to attach to the item */
            tags: components["schemas"]["TagRequest"][];
            /**
             * @description Whether the item is private (limited sharing, Qiita only)
             * @default false
             * @example false
             */
            private: boolean;
            /**
             * @description Whether the item is in co-editing mode (Qiita Team only)
             * @default false
             * @example false
             */
            coediting: boolean;
            /**
             * @description Group URL name to publish the item (null for public, Qiita Team only)
             * @example dev
             */
            group_url_name?: string | null;
            /**
             * @description Organization URL name
             * @example qiita-inc
             */
            organization_url_name?: string | null;
            /**
             * @description Whether slide mode is enabled
             * @default false
             * @example false
             */
            slide: boolean;
            /**
             * @description Whether to post to Twitter (only valid if Twitter integration is enabled)
             * @default false
             * @example false
             */
            tweet: boolean;
        };
        UpdateItemRequest: {
            /**
             * @description Item title
             * @example Example title
             */
            title: string;
            /**
             * @description Item content in Markdown format
             * @example # Example
             */
            body: string;
            /** @description List of tags to attach to the item */
            tags?: components["schemas"]["TagRequest"][];
            /**
             * @description Whether the item is private (limited sharing, Qiita only)
             * @example false
             */
            private?: boolean;
            /**
             * @description Whether the item is in co-editing mode (Qiita Team only)
             * @example false
             */
            coediting?: boolean;
            /**
             * @description Group URL name to publish the item (null for public, Qiita Team only)
             * @example dev
             */
            group_url_name?: string | null;
            /**
             * @description Organization URL name
             * @example qiita-inc
             */
            organization_url_name?: string | null;
            /**
             * @description Whether slide mode is enabled
             * @example false
             */
            slide?: boolean;
        };
        Tag: {
            /**
             * @description Tag name
             * @example Ruby
             */
            name: string;
            /**
             * @description List of versions
             * @example [
             *       "0.0.1"
             *     ]
             */
            versions?: string[];
        };
        TagRequest: {
            /**
             * @description Tag name
             * @example Ruby
             */
            name: string;
            /**
             * @description List of versions
             * @example [
             *       "0.0.1"
             *     ]
             */
            versions?: string[];
        };
        User: {
            /**
             * @description User ID
             * @example qiita
             */
            id: string;
            /**
             * @description Display name
             * @example Qiita キータ
             */
            name: string | null;
            /**
             * @description Self-introduction
             * @example Hello, world.
             */
            description: string | null;
            /**
             * @description Profile image URL
             * @example https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/88/ccf90b557a406157dbb9d2d7e543dae384dbb561/large.png?1575443439
             */
            profile_image_url: string;
            /**
             * @description Website URL
             * @example https://qiita.com
             */
            website_url: string | null;
            /**
             * @description Organization
             * @example Qiita Inc.
             */
            organization: string | null;
            /**
             * @description Location
             * @example Tokyo, Japan
             */
            location: string | null;
            /**
             * @description GitHub ID
             * @example qiitan
             */
            github_login_name: string | null;
            /**
             * @description Twitter screen name
             * @example qiita
             */
            twitter_screen_name: string | null;
            /**
             * @description Facebook ID
             * @example qiita
             */
            facebook_id: string | null;
            /**
             * @description LinkedIn ID
             * @example qiita
             */
            linkedin_id: string | null;
            /**
             * @description Permanent user ID
             * @example 1
             */
            permanent_id: number;
            /**
             * @description Number of items published on qiita.com
             * @example 300
             */
            items_count: number;
            /**
             * @description Number of users this user is following
             * @example 100
             */
            followees_count: number;
            /**
             * @description Number of users following this user
             * @example 200
             */
            followers_count: number;
            /**
             * @description Whether Qiita Team only mode is enabled
             * @example false
             */
            team_only: boolean;
        };
        Group: {
            /**
             * @description Unique group name on the team
             * @example dev
             */
            url_name: string;
            /**
             * @description Display name of the group
             * @example Dev
             */
            name: string;
            /**
             * @description Group description
             * @example This group is for developers.
             */
            description: string;
            /**
             * @description Whether the group is private
             * @example false
             */
            private: boolean;
            /**
             * Format: date-time
             * @description Creation date and time
             * @example 2000-01-01T00:00:00+00:00
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update date and time
             * @example 2000-01-01T00:00:00+00:00
             */
            updated_at: string;
        } | null;
        TeamMembership: {
            /**
             * @description User name registered in the team
             * @example Qiita キータ
             */
            name: string;
        } | null;
        Error: {
            /**
             * @description Error type
             * @example forbidden
             */
            type: string;
            /**
             * @description Error message
             * @example Forbidden
             */
            message: string;
        };
    };
    responses: {
        /** @description Bad Request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Forbidden */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not Found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unprocessable Entity */
        UnprocessableEntity: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal Server Error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listItems: {
        parameters: {
            query?: {
                /** @description Page number (1-100) */
                page?: number;
                /** @description Number of items per page (1-100) */
                per_page?: number;
                /** @description Search query string */
                query?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"][];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"];
                };
            };
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
}
